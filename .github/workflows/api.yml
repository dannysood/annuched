name: API
on:
  push:
    branches: ["main"]

jobs:
  api-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mbstring, xml, ctype, iconv, intl, pgsql, redis, soap, zip, mcrypt, pdo_pgsql
          tools: composer:v2
          coverage: xdebug
      - uses: actions/checkout@v3
      - name: Create .env
        shell: bash
        env:
          API_TEST_ENV_DATA: ${{ secrets.API_TEST_ENV }}
        run: |
          echo $API_TEST_ENV_DATA | base64 --decode > .env

      - name: Install dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Execute tests via artisan
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test --coverage --min=6.2 --coverage-clover='tests/reports/coverage.xml'  --coverage-html='tests/reports/coverage'
      - name: Upload coverage file
        uses: "actions/upload-artifact@v2"
        # skip locally in ACT
        if: ${{ !env.ACT }}
        with:
          name: "${{ github.job }}-${{ matrix.php-version }}.coverage"
          path: |
            api/tests/reports/
          retention-days: 1
  api-docker-build:
    needs: api-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v3
      - name: Create .env
        shell: bash
        env:
          API_PROD_ENV_DATA: ${{ secrets.API_PROD_ENV }}
          API_PROD_FIREBASE_SERVICE_ACCOUNT_DATA: ${{ secrets.API_PROD_FIREBASE_SERVICE_ACCOUNT }}

        run: |
          echo $API_PROD_ENV_DATA | base64 --decode > .env
          echo $API_PROD_FIREBASE_SERVICE_ACCOUNT_DATA > ./storage/certs/annuched-firebase-adminsdk.json
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag us-central1-docker.pkg.dev/annuched/prod-api/api:latest
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.API_PROD_GCP_SERVICE_ACCOUNT }}
      - name: Docker Push
        run: docker push us-central1-docker.pkg.dev/annuched/prod-api/api:latest

  api-deploy-cloud-run:
    needs: api-docker-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.API_PROD_GCP_SERVICE_ACCOUNT }}"

      - name: "Deploy to Cloud Run"
        uses: "google-github-actions/deploy-cloudrun@v0"
        with:
          service: prod-api
          image: us-central1-docker.pkg.dev/annuched/prod-api/api:latest
          region: us-central1
          # env_vars: 'NAME="Hello World"'

  deploy-fetch-from-remote-blog-api:
    needs: api-deploy-cloud-run
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v3"
      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.API_PROD_GCP_SERVICE_ACCOUNT }}"

      - id: "deploy"
        uses: "google-github-actions/deploy-cloud-functions@v0"
        with:
          name: "fetch-from-remote-blog-api"
          entry_point: "fetchFromRemoteBlogAPI"
          event_trigger_type: google.pubsub.topic.publish
          event_trigger_resource: projects/annuched/topics/fetch-from-remote-blog-api
          event_trigger_service: pubsub.googleapis.com
          source_dir: triggers/fetchFromRemoteBlogAPI
          runtime: "nodejs16"

  # api-migration:
  #   needs: api-deploy-cloud-run
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: api
  #   steps:
  #     - name: Setup php
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: "8.1"
  #         extensions: mbstring, xml, ctype, iconv, intl, pgsql, redis, soap, zip, mcrypt, pdo_pgsql
  #         tools: composer:v2
  #         coverage: xdebug
  #     - uses: actions/checkout@v3
  #     - name: Create .env
  #       shell: bash
  #       env:
  #         API_PROD_ENV_DATA: ${{ secrets.API_PROD_ENV }}
  #       run: |
  #         echo $API_PROD_ENV_DATA | base64 --decode > .env

  #     - name: Install dependencies
  #       run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs
  #     - name: Execute migrations
  #       run: php artisan migrate
